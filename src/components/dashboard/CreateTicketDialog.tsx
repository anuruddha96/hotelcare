import { useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { toast } from '@/hooks/use-toast';
import { hotels } from './HotelFilter';

interface CreateTicketDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onTicketCreated: () => void;
}

export function CreateTicketDialog({ open, onOpenChange, onTicketCreated }: CreateTicketDialogProps) {
  const { profile } = useAuth();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    room_number: '',
    priority: 'medium' as 'low' | 'medium' | 'high' | 'urgent',
    department: '',
    hotel: profile?.assigned_hotel || '',
  });

  // Check if user can select any hotel or only their assigned one
  const canSelectAnyHotel = profile?.role === 'admin' || profile?.role === 'top_management';
  
  // Available hotels based on user permissions
  const availableHotels = canSelectAnyHotel 
    ? hotels.filter(h => h.id !== 'all')
    : hotels.filter(h => h.id !== 'all' && (profile?.assigned_hotel ? h.id === profile.assigned_hotel : true));

  const departments = [
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'housekeeping', label: 'Housekeeping' },
    { value: 'reception', label: 'Reception' },
    { value: 'marketing', label: 'Marketing' },
    { value: 'back_office', label: 'Back Office' },
    { value: 'control', label: 'Control' },
    { value: 'finance', label: 'Finance' },
    { value: 'top_management', label: 'Top Management' },
  ];

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!profile) return;

    setLoading(true);
    try {
      const { error } = await supabase.from('tickets').insert({
        title: formData.title,
        description: formData.description,
        room_number: formData.room_number,
        priority: formData.priority,
        department: formData.department,
        hotel: formData.hotel,
        created_by: profile.id,
        ticket_number: '', // Will be auto-generated by trigger
      });

      if (error) throw error;

      toast({
        title: 'Success',
        description: 'Ticket created successfully',
      });

      setFormData({
        title: '',
        description: '',
        room_number: '',
        priority: 'medium',
        department: '',
        hotel: profile?.assigned_hotel || '',
      });
      
      onTicketCreated();
      onOpenChange(false);
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create New Ticket</DialogTitle>
          <DialogDescription>
            Submit a new maintenance request for hotel staff to review and address.
          </DialogDescription>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="title">Title</Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              placeholder="Brief description of the issue"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="room_number">Room Number</Label>
            <Input
              id="room_number"
              value={formData.room_number}
              onChange={(e) => setFormData({ ...formData, room_number: e.target.value })}
              placeholder="e.g. 101, Lobby, Kitchen"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="department">Department</Label>
            <Select 
              value={formData.department} 
              onValueChange={(value) => setFormData({ ...formData, department: value })}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select Department" />
              </SelectTrigger>
              <SelectContent>
                {departments.map((dept) => (
                  <SelectItem key={dept.value} value={dept.value}>
                    {dept.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="hotel">
              Hotel
              {profile?.assigned_hotel && !canSelectAnyHotel && (
                <span className="text-xs text-muted-foreground ml-2">
                  (Assigned to: {profile.assigned_hotel})
                </span>
              )}
            </Label>
            <Select 
              value={formData.hotel} 
              onValueChange={(value) => setFormData({ ...formData, hotel: value })}
              disabled={!canSelectAnyHotel && !!profile?.assigned_hotel}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select Hotel" />
              </SelectTrigger>
              <SelectContent>
                {availableHotels.map((hotel) => (
                  <SelectItem key={hotel.id} value={hotel.id}>
                    {hotel.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="priority">Priority</Label>
            <Select 
              value={formData.priority} 
              onValueChange={(value: 'low' | 'medium' | 'high' | 'urgent') => 
                setFormData({ ...formData, priority: value })
              }
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="low">Low</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="urgent">Urgent</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              placeholder="Detailed description of the maintenance issue..."
              rows={4}
              required
            />
          </div>

          <div className="flex justify-end gap-2 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              disabled={loading}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? 'Creating...' : 'Create Ticket'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}